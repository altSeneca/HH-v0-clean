package com.hazardhawk.domain.models.ptp

import kotlinx.serialization.Serializable

/**
 * Pre-Task Plan (PTP) / Job Hazard Analysis domain model
 * Represents OSHA-compliant safety documentation for construction work
 */
@Serializable
data class PreTaskPlan(
    val id: String,
    val projectId: String?,
    val createdBy: String,
    val createdAt: Long,
    val updatedAt: Long,
    val workType: String, // e.g., "Roofing", "Electrical", "Plumbing"
    val workScope: String,
    val crewSize: Int? = null,
    val status: PtpStatus = PtpStatus.DRAFT,

    // AI-generated and user-modified content
    val aiGeneratedContent: PtpContent? = null,
    val userModifiedContent: PtpContent? = null,

    // Document paths
    val pdfPath: String? = null,
    val cloudStorageUrl: String? = null,

    // Signatures
    val signatureSupervisor: SignatureData? = null,

    // Work details from questionnaire
    val toolsEquipment: List<String> = emptyList(),
    val mechanicalEquipment: List<String> = emptyList(),
    val environmentalConditions: List<String> = emptyList(),
    val materialsInvolved: List<String> = emptyList(),
    val specificTasks: List<String> = emptyList(),

    // Emergency information
    val emergencyContacts: List<EmergencyContact> = emptyList(),
    val nearestHospital: String? = null,
    val evacuationRoutes: String? = null,

    // Associated photos
    val photos: List<PtpPhoto> = emptyList(),

    // Crew Management Integration (auto-populated from centralized sources)
    val crewId: String? = null,
    val crewName: String? = null,
    val foremanId: String? = null, // Selected foreman (may differ from crew default)
    val foremanName: String? = null,

    // Company info (auto-populated, no re-entry needed)
    val companyId: String? = null,
    val companyName: String? = null,
    val companyAddress: String? = null,
    val companyPhone: String? = null,
    val companyLogoUrl: String? = null,

    // Project info (auto-populated, no re-entry needed)
    val projectName: String? = null,
    val projectNumber: String? = null,
    val projectAddress: String? = null,
    val clientName: String? = null,
    val generalContractor: String? = null,
    val superintendentName: String? = null,

    // Crew roster sign-in sheet
    val crewRoster: List<CrewRosterEntry> = emptyList()
)

@Serializable
enum class PtpStatus {
    DRAFT,
    APPROVED,
    SUBMITTED,
    ARCHIVED
}

/**
 * PTP content generated by AI or modified by user
 */
@Serializable
data class PtpContent(
    val hazards: List<PtpHazard> = emptyList(),
    val jobSteps: List<JobStep> = emptyList(),
    val emergencyProcedures: List<String> = emptyList(),
    val requiredTraining: List<String> = emptyList()
)

/**
 * Identified hazard with OSHA compliance information
 */
@Serializable
data class PtpHazard(
    val oshaCode: String, // e.g., "1926.501(b)(1)"
    val description: String,
    val severity: HazardSeverity,
    val controls: List<String> = emptyList(),
    val requiredPpe: List<String> = emptyList(),
    val photoReferences: List<String> = emptyList() // Photo IDs showing this hazard
)

@Serializable
enum class HazardSeverity {
    MINOR,
    MAJOR,
    CRITICAL
}

/**
 * Job step with associated hazards and controls
 */
@Serializable
data class JobStep(
    val stepNumber: Int,
    val description: String,
    val hazards: List<String> = emptyList(),
    val controls: List<String> = emptyList(),
    val ppe: List<String> = emptyList()
)

/**
 * Photo linked to a PTP
 */
@Serializable
data class PtpPhoto(
    val ptpId: String,
    val photoId: String,
    val displayOrder: Int,
    val caption: String? = null,
    val addedAt: Long,
    val photoPath: String? = null // Populated when joined with photos table
)

/**
 * Digital signature data
 */
@Serializable
data class SignatureData(
    val supervisorName: String,
    val signatureDate: Long,
    val signatureBlob: ByteArray? = null // For drawing-based signatures
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as SignatureData

        if (supervisorName != other.supervisorName) return false
        if (signatureDate != other.signatureDate) return false
        if (signatureBlob != null) {
            if (other.signatureBlob == null) return false
            if (!signatureBlob.contentEquals(other.signatureBlob)) return false
        } else if (other.signatureBlob != null) return false

        return true
    }

    override fun hashCode(): Int {
        var result = supervisorName.hashCode()
        result = 31 * result + signatureDate.hashCode()
        result = 31 * result + (signatureBlob?.contentHashCode() ?: 0)
        return result
    }
}

/**
 * Emergency contact information
 */
@Serializable
data class EmergencyContact(
    val name: String,
    val role: String, // e.g., "Site Supervisor", "Safety Manager"
    val phoneNumber: String,
    val isPrimary: Boolean = false
)

/**
 * Crew roster entry for sign-in sheet (auto-populated from crew assignment)
 */
@Serializable
data class CrewRosterEntry(
    val employeeNumber: String,
    val name: String,
    val role: String,
    val certifications: List<String> = emptyList(), // Certificate codes (e.g., "OSHA30", "CPR")
    val signature: String? = null, // Will be filled on-site
    val signedAt: Long? = null // Timestamp when signed
)

/**
 * Questionnaire responses for PTP creation
 */
@Serializable
data class PtpQuestionnaire(
    // Project Details (OSHA-required)
    val projectName: String = "",
    val projectLocation: String = "",
    val competentPersonName: String = "",

    // Work Type and Tasks
    val workType: String,
    val specificTasks: List<String>,
    val toolsEquipment: List<String>,
    val mechanicalEquipment: List<String>,
    val environmentalConditions: List<String>,
    val materialsInvolved: List<String>,
    val crewSize: Int,
    val workingAtHeight: Boolean = false,
    val maximumHeight: Double? = null, // In feet
    val fallProtection: List<String> = emptyList(),
    val nearPowerLines: Boolean = false,
    val confinedSpace: Boolean = false,
    val hazardousMaterials: Boolean = false,
    val additionalNotes: String? = null
)
