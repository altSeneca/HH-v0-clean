CREATE TABLE photo_tags (
    photo_id TEXT NOT NULL,
    tag_id TEXT NOT NULL,
    applied_at INTEGER NOT NULL,
    applied_by TEXT NOT NULL,
    confidence REAL DEFAULT 1.0, -- For AI-suggested tags
    source TEXT DEFAULT 'manual' CHECK (source IN ('manual', 'ai', 'suggested')),
    PRIMARY KEY (photo_id, tag_id),
    FOREIGN KEY (photo_id) REFERENCES photos(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
);

-- Indexes for better query performance
CREATE INDEX photo_tags_photo_id_idx ON photo_tags(photo_id);
CREATE INDEX photo_tags_tag_id_idx ON photo_tags(tag_id);
CREATE INDEX photo_tags_applied_at_idx ON photo_tags(applied_at);
CREATE INDEX photo_tags_source_idx ON photo_tags(source);

-- Insert photo-tag relationship
insertPhotoTag:
INSERT INTO photo_tags (photo_id, tag_id, applied_at, applied_by, confidence, source)
VALUES (?, ?, ?, ?, ?, ?);

-- Get all tags for a photo
selectTagsForPhoto:
SELECT t.*, pt.applied_at, pt.applied_by, pt.confidence, pt.source
FROM tags t
INNER JOIN photo_tags pt ON t.id = pt.tag_id
WHERE pt.photo_id = ?
ORDER BY pt.applied_at ASC;

-- Get all photos for a tag
selectPhotosForTag:
SELECT p.*, pt.applied_at, pt.applied_by, pt.confidence, pt.source
FROM photos p
INNER JOIN photo_tags pt ON p.id = pt.photo_id
WHERE pt.tag_id = ?
ORDER BY pt.applied_at DESC;

-- Remove tag from photo
removePhotoTag:
DELETE FROM photo_tags 
WHERE photo_id = ? AND tag_id = ?;

-- Remove all tags from photo
removeAllTagsFromPhoto:
DELETE FROM photo_tags 
WHERE photo_id = ?;

-- Get photos with specific tags (for search)
-- Note: This query needs to be modified for multiplatform compatibility
-- Use individual tag queries or implement in application logic
-- selectPhotosByTags:
-- SELECT DISTINCT p.*
-- FROM photos p
-- INNER JOIN photo_tags pt ON p.id = pt.photo_id
-- WHERE pt.tag_id IN ?;

-- Get tag usage statistics for a user
selectTagUsageByUser:
SELECT t.id, t.name, t.category, COUNT(*) AS usage_count
FROM tags t
INNER JOIN photo_tags pt ON t.id = pt.tag_id
INNER JOIN photos p ON pt.photo_id = p.id
WHERE p.user_id = ?
GROUP BY t.id, t.name, t.category
ORDER BY usage_count DESC
LIMIT ?;

-- Get tag usage statistics for a project
selectTagUsageByProject:
SELECT t.id, t.name, t.category, COUNT(*) AS usage_count
FROM tags t
INNER JOIN photo_tags pt ON t.id = pt.tag_id
INNER JOIN photos p ON pt.photo_id = p.id
WHERE p.project_id = ?
GROUP BY t.id, t.name, t.category
ORDER BY usage_count DESC
LIMIT ?;

-- Get recommended tags based on user history
selectRecommendedTagsForUser:
SELECT t.*, COUNT(*) AS usage_frequency
FROM tags t
INNER JOIN photo_tags pt ON t.id = pt.tag_id
INNER JOIN photos p ON pt.photo_id = p.id
WHERE p.user_id = ? AND pt.applied_at > ?
GROUP BY t.id
ORDER BY usage_frequency DESC, t.last_used DESC
LIMIT ?;

-- Get recommended tags based on project history
selectRecommendedTagsForProject:
SELECT t.*, COUNT(*) AS usage_frequency
FROM tags t
INNER JOIN photo_tags pt ON t.id = pt.tag_id
INNER JOIN photos p ON pt.photo_id = p.id
WHERE p.project_id = ? AND pt.applied_at > ?
GROUP BY t.id
ORDER BY usage_frequency DESC, t.last_used DESC
LIMIT ?;

-- Get AI-suggested tags
selectAISuggestedTags:
SELECT t.*, pt.confidence
FROM tags t
INNER JOIN photo_tags pt ON t.id = pt.tag_id
WHERE pt.photo_id = ? AND pt.source = 'ai'
ORDER BY pt.confidence DESC;

-- Count photos for each tag
countPhotosPerTag:
SELECT t.id, t.name, COUNT(pt.photo_id) AS photo_count
FROM tags t
LEFT JOIN photo_tags pt ON t.id = pt.tag_id
GROUP BY t.id, t.name
ORDER BY photo_count DESC;