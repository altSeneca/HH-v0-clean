CREATE TABLE photos (
    id TEXT PRIMARY KEY,
    file_path TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    location_lat REAL,
    location_lng REAL,
    location_address TEXT,
    location_accuracy REAL,
    project_id TEXT,
    user_id TEXT,
    compliance_status TEXT CHECK (compliance_status IN ('compliant', 'needs_improvement', 'unknown')),
    sync_status TEXT DEFAULT 'pending' CHECK (sync_status IN ('pending', 'syncing', 'synced', 'failed')),
    s3_url TEXT,
    file_size INTEGER,
    width INTEGER,
    height INTEGER,
    md5_hash TEXT,
    thumbnail_path TEXT,
    exif_make TEXT,
    exif_model TEXT,
    exif_orientation INTEGER,
    exif_datetime_original TEXT,
    exif_iso INTEGER,
    exif_f_number TEXT,
    exif_exposure_time TEXT,
    exif_focal_length TEXT,
    exif_flash TEXT,
    exif_white_balance TEXT,
    exif_gps_altitude REAL,
    exif_gps_direction REAL,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL
);

-- Indexes for better query performance
CREATE INDEX photos_project_id_idx ON photos(project_id);
CREATE INDEX photos_user_id_idx ON photos(user_id);
CREATE INDEX photos_sync_status_idx ON photos(sync_status);
CREATE INDEX photos_timestamp_idx ON photos(timestamp);
CREATE INDEX photos_compliance_status_idx ON photos(compliance_status);
CREATE INDEX photos_md5_hash_idx ON photos(md5_hash);
CREATE INDEX photos_file_size_idx ON photos(file_size);
CREATE INDEX photos_created_at_idx ON photos(created_at);

-- Insert a photo
insertPhoto:
INSERT INTO photos (
    id, file_path, timestamp, location_lat, location_lng, location_address, location_accuracy,
    project_id, user_id, compliance_status, sync_status, file_size, width, height, md5_hash,
    thumbnail_path, exif_make, exif_model, exif_orientation, exif_datetime_original, exif_iso,
    exif_f_number, exif_exposure_time, exif_focal_length, exif_flash, exif_white_balance,
    exif_gps_altitude, exif_gps_direction, created_at, updated_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

-- Get photo by ID
selectPhotoById:
SELECT * FROM photos WHERE id = ?;

-- Get all photos for a project
selectPhotosByProject:
SELECT * FROM photos 
WHERE project_id = ? 
ORDER BY timestamp DESC
LIMIT ?;

-- Get photos by user
selectPhotosByUser:
SELECT * FROM photos 
WHERE user_id = ?
ORDER BY timestamp DESC
LIMIT ?;

-- Get photos by sync status
selectPhotosBySyncStatus:
SELECT * FROM photos 
WHERE sync_status = ?
ORDER BY created_at ASC;

-- Get photos by compliance status
selectPhotosByComplianceStatus:
SELECT * FROM photos 
WHERE compliance_status = ?
ORDER BY timestamp DESC
LIMIT ?;

-- Update photo sync status
updatePhotoSyncStatus:
UPDATE photos 
SET sync_status = ?, s3_url = ?, updated_at = ?
WHERE id = ?;

-- Update photo compliance status
updatePhotoComplianceStatus:
UPDATE photos 
SET compliance_status = ?, updated_at = ?
WHERE id = ?;

-- Delete photo
deletePhoto:
DELETE FROM photos WHERE id = ?;

-- Count photos by project
countPhotosByProject:
SELECT COUNT(*) FROM photos WHERE project_id = ?;

-- Count photos by sync status
countPhotosBySyncStatus:
SELECT COUNT(*) FROM photos WHERE sync_status = ?;

-- Get recent photos (last 7 days)
selectRecentPhotos:
SELECT * FROM photos 
WHERE timestamp > ? 
ORDER BY timestamp DESC
LIMIT ?;

-- Get photos with location data
selectPhotosWithLocation:
SELECT * FROM photos 
WHERE location_lat IS NOT NULL AND location_lng IS NOT NULL
ORDER BY timestamp DESC
LIMIT ?;

-- Enhanced queries for robust photo management

-- Get all photos with pagination
getAllPhotos:
SELECT * FROM photos 
ORDER BY timestamp DESC
LIMIT ? OFFSET ?;

-- Get photos by date range
selectPhotosByDateRange:
SELECT * FROM photos 
WHERE timestamp BETWEEN ? AND ?
ORDER BY timestamp DESC
LIMIT ?;

-- Get photos by multiple IDs (for batch operations)
-- Note: This query needs to be called with individual IDs or use a different approach
-- selectPhotosByIds:
-- SELECT * FROM photos WHERE id IN ?;

-- Delete multiple photos
-- Note: Use individual delete calls or modify approach for multiplatform compatibility
-- deleteMultiplePhotos:
-- DELETE FROM photos WHERE id IN ?;

-- Get total photo count
getTotalPhotoCount:
SELECT COUNT(*) FROM photos;

-- Get total storage size
getTotalStorageSize:
SELECT COALESCE(SUM(file_size), 0) FROM photos WHERE file_size IS NOT NULL;

-- Find duplicate photos by MD5 hash
selectDuplicatePhotos:
SELECT md5_hash, COUNT(*) AS duplicate_count
FROM photos 
WHERE md5_hash IS NOT NULL 
GROUP BY md5_hash 
HAVING COUNT(*) > 1;

-- Get photo by MD5 hash (for deduplication)
selectPhotoByMd5Hash:
SELECT * FROM photos WHERE md5_hash = ? LIMIT 1;

-- Get storage statistics by month
selectStorageByMonth:
SELECT 
    strftime('%Y-%m', datetime(timestamp/1000, 'unixepoch')) AS month,
    COUNT(*) AS photo_count,
    COALESCE(SUM(file_size), 0) AS total_size
FROM photos 
WHERE file_size IS NOT NULL
GROUP BY month 
ORDER BY month DESC;

-- Get photos without thumbnails
selectPhotosWithoutThumbnails:
SELECT * FROM photos 
WHERE thumbnail_path IS NULL OR thumbnail_path = ''
ORDER BY timestamp DESC
LIMIT ?;

-- Update photo metadata (file size, dimensions, hash)
updatePhotoMetadata:
UPDATE photos 
SET file_size = ?, width = ?, height = ?, md5_hash = ?, updated_at = ?
WHERE id = ?;

-- Update thumbnail path
updatePhotoThumbnail:
UPDATE photos 
SET thumbnail_path = ?, updated_at = ?
WHERE id = ?;

-- Update EXIF data
updatePhotoExif:
UPDATE photos 
SET exif_make = ?, exif_model = ?, exif_orientation = ?, exif_datetime_original = ?,
    exif_iso = ?, exif_f_number = ?, exif_exposure_time = ?, exif_focal_length = ?,
    exif_flash = ?, exif_white_balance = ?, exif_gps_altitude = ?, exif_gps_direction = ?,
    updated_at = ?
WHERE id = ?;

-- Get photos older than specified timestamp (for cleanup)
selectPhotosOlderThan:
SELECT * FROM photos 
WHERE timestamp < ?
ORDER BY timestamp ASC
LIMIT ?;

-- Count photos by file size range
countPhotosByFileSizeRange:
SELECT 
    CASE 
        WHEN file_size < 1048576 THEN 'Under 1MB'
        WHEN file_size < 5242880 THEN '1-5MB'
        WHEN file_size < 10485760 THEN '5-10MB'
        ELSE 'Over 10MB'
    END AS size_category,
    COUNT(*) AS photo_count
FROM photos 
WHERE file_size IS NOT NULL
GROUP BY size_category;

-- Get average file size by project
selectAverageFileSizeByProject:
SELECT project_id, AVG(file_size) AS avg_size, COUNT(*) AS photo_count
FROM photos 
WHERE project_id IS NOT NULL AND file_size IS NOT NULL
GROUP BY project_id;

-- Search photos by location proximity (simplified bounding box)
selectPhotosByLocationProximity:
SELECT *
FROM photos 
WHERE location_lat IS NOT NULL AND location_lng IS NOT NULL
  AND location_lat BETWEEN (? - 0.01) AND (? + 0.01)
  AND location_lng BETWEEN (? - 0.01) AND (? + 0.01)
ORDER BY timestamp DESC
LIMIT ?;