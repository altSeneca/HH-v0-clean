name: Phase 2 Backend Integration Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

jobs:
  # ============================================================================
  # Job 1: Unit Tests (Fast feedback - 10 minutes)
  # ============================================================================
  unit-tests:
    name: Unit Tests (Shared Module)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./HazardHawk
        
      - name: Run Unit Tests
        run: ./gradlew :shared:test --stacktrace --no-daemon
        working-directory: ./HazardHawk
        
      - name: Generate JaCoCo Coverage Report
        if: always()
        run: ./gradlew :shared:jacocoTestReport --no-daemon
        working-directory: ./HazardHawk
        
      - name: Upload Coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./HazardHawk/shared/build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: shared-unit-tests
          fail_ci_if_error: false
          
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ./HazardHawk/shared/build/test-results/test/**/*.xml
          check_name: Unit Test Results
          
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: ./HazardHawk/shared/build/reports/tests/test/
          retention-days: 7

  # ============================================================================
  # Job 2: Android App Unit Tests
  # ============================================================================
  android-unit-tests:
    name: Android Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./HazardHawk
        
      - name: Run Android Unit Tests
        run: ./gradlew :androidApp:testDebugUnitTest --stacktrace --no-daemon
        working-directory: ./HazardHawk
        
      - name: Upload Android Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-unit-test-reports
          path: ./HazardHawk/androidApp/build/reports/tests/testDebugUnitTest/
          retention-days: 7

  # ============================================================================
  # Job 3: Integration Tests (with Localstack for S3)
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./HazardHawk
        
      - name: Wait for Localstack
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 1; done'
          
      - name: Setup S3 Test Buckets
        run: |
          # Install AWS CLI
          pip install awscli-local[ver1]
          
          # Create test buckets
          awslocal s3 mb s3://hazardhawk-test-certifications
          awslocal s3 mb s3://hazardhawk-test-documents
          
          # Configure CORS
          awslocal s3api put-bucket-cors --bucket hazardhawk-test-certifications --cors-configuration '{
            "CORSRules": [{
              "AllowedOrigins": ["*"],
              "AllowedMethods": ["GET", "PUT", "POST"],
              "AllowedHeaders": ["*"]
            }]
          }'
          
          echo "S3 buckets created successfully"
          awslocal s3 ls
        
      - name: Run Integration Tests
        run: ./gradlew :shared:integrationTest --stacktrace --no-daemon
        working-directory: ./HazardHawk
        env:
          AWS_ENDPOINT: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_TEST_KEY }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_TEST_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_TEST_TOKEN }}
          
      - name: Upload Integration Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: ./HazardHawk/shared/build/reports/tests/integrationTest/
          retention-days: 7

  # ============================================================================
  # Job 4: End-to-End Tests (Android)
  # ============================================================================
  e2e-android-tests:
    name: E2E Tests (Android)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        api-level: [26, 30, 33]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./HazardHawk
        
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}
          
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."
          
      - name: Run E2E Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: cd HazardHawk && ./gradlew :androidApp:connectedDebugAndroidTest --stacktrace --no-daemon
          
      - name: Upload E2E Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-android-test-reports-api-${{ matrix.api-level }}
          path: ./HazardHawk/androidApp/build/reports/androidTests/connected/
          retention-days: 7

  # ============================================================================
  # Job 5: Performance Tests (main branch only)
  # ============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run Performance Tests
        run: |
          if [ -f "load-tests/phase2-certification-upload.js" ]; then
            k6 run load-tests/phase2-certification-upload.js --out json=performance-results.json
          else
            echo "Performance tests not yet implemented - skipping"
          fi
        env:
          API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          
      - name: Upload Performance Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: performance-results.json
          retention-days: 30

  # ============================================================================
  # Job 6: Code Quality Checks
  # ============================================================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        working-directory: ./HazardHawk
        
      - name: Run ktlint
        run: ./gradlew ktlintCheck --no-daemon || true
        working-directory: ./HazardHawk
        continue-on-error: true
        
      - name: Run detekt
        run: ./gradlew detekt --no-daemon || true
        working-directory: ./HazardHawk
        continue-on-error: true
        
      - name: Upload ktlint Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ktlint-reports
          path: ./HazardHawk/**/build/reports/ktlint/
          retention-days: 7
          
      - name: Upload detekt Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: detekt-reports
          path: ./HazardHawk/**/build/reports/detekt/
          retention-days: 7

  # ============================================================================
  # Job 7: Test Coverage Summary
  # ============================================================================
  coverage-summary:
    name: Test Coverage Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, android-unit-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Unit Test Reports
        uses: actions/download-artifact@v4
        with:
          name: unit-test-reports
          path: ./coverage-reports/shared/
          
      - name: Download Android Test Reports
        uses: actions/download-artifact@v4
        with:
          name: android-unit-test-reports
          path: ./coverage-reports/android/
          
      - name: Generate Coverage Summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Phase 2 Testing Progress" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Target | Current | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | 110 | TBD | 🔄 |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | 30 | TBD | 🔄 |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | 15 | TBD | 🔄 |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | 85%+ | TBD | 🔄 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full reports available in workflow artifacts." >> $GITHUB_STEP_SUMMARY
