#!/bin/bash

# Camera Viewport Positioning Test Suite
# Comprehensive validation of camera viewport fixes and UI improvements

echo "=========================================="
echo "HazardHawk Camera Viewport Test Suite"
echo "=========================================="
echo "Testing viewport positioning fixes across aspect ratios"
echo "Expected improvements: 20-30% startup time, 15-25MB memory reduction"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test results tracking
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0

# Function to run a test and capture results
run_test() {
    local test_name="$1"
    local test_command="$2"
    local description="$3"
    
    echo -e "${YELLOW}Running: $test_name${NC}"
    echo "Description: $description"
    echo "Command: $test_command"
    echo ""
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    # Execute the test
    if eval "$test_command"; then
        echo -e "${GREEN}‚úì PASSED: $test_name${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${RED}‚úó FAILED: $test_name${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
    
    echo ""
    echo "------------------------------------------"
    echo ""
}

# Check if device is connected
echo "Checking Android device connection..."
if ! adb devices | grep -q "device$"; then
    echo -e "${RED}ERROR: No Android device connected${NC}"
    echo "Please connect an Android device and enable USB debugging"
    exit 1
fi

echo -e "${GREEN}‚úì Android device connected${NC}"
echo ""

# Build the project first
echo "Building HazardHawk project..."
cd HazardHawk
if ! ./gradlew assembleDebug; then
    echo -e "${RED}ERROR: Failed to build project${NC}"
    exit 1
fi
echo -e "${GREEN}‚úì Project built successfully${NC}"
echo ""

# Install the APK
echo "Installing HazardHawk APK..."
if ! ./gradlew installDebug; then
    echo -e "${RED}ERROR: Failed to install APK${NC}"
    exit 1
fi
echo -e "${GREEN}‚úì APK installed successfully${NC}"
echo ""

# Run Unit Tests
echo "=========================================="
echo "PHASE 1: UNIT TESTS"
echo "=========================================="

run_test "UnifiedViewfinderCalculator Unit Tests" \
    "./gradlew :androidApp:testDebugUnitTest --tests='*UnifiedViewfinderCalculatorTest*'" \
    "Validates viewport bounds calculation for all aspect ratios (1:1, 4:3, 16:9)"

run_test "Aspect Ratio Consistency Tests" \
    "./gradlew :androidApp:testDebugUnitTest --tests='*UnifiedViewfinderCalculatorTest*aspect*'" \
    "Ensures aspect ratio calculations are mathematically correct and consistent"

run_test "Safe Area and Burnin Prevention Tests" \
    "./gradlew :androidApp:testDebugUnitTest --tests='*UnifiedViewfinderCalculatorTest*safe*'" \
    "Validates safe area calculations for preventing screen burnin"

run_test "Legacy Compatibility Tests" \
    "./gradlew :androidApp:testDebugUnitTest --tests='*UnifiedViewfinderCalculatorTest*legacy*'" \
    "Tests conversion from legacy inverted aspect ratios (bug fixes)"

# Run UI Layout Tests
echo "=========================================="
echo "PHASE 2: UI LAYOUT TESTS"
echo "=========================================="

run_test "Horizontal Zoom Slider Positioning" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraControlsLayoutTest*horizontal_zoom*'" \
    "Validates zoom slider positioning across all aspect ratios"

run_test "Camera Controls Overlay Alignment" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraControlsLayoutTest*overlay_aligns*'" \
    "Ensures UI controls align correctly with viewport boundaries"

run_test "Touch Target Accessibility" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraControlsLayoutTest*touch_targets*'" \
    "Verifies all controls meet minimum touch target size requirements"

run_test "Safe Area Compliance" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraControlsLayoutTest*safe_area*'" \
    "Tests UI element positioning for burnin prevention compliance"

# Run Integration Tests
echo "=========================================="
echo "PHASE 3: INTEGRATION TESTS"
echo "=========================================="

run_test "Complete Camera Initialization" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*initialization*'" \
    "End-to-end camera startup and UI element initialization"

run_test "Aspect Ratio Change Workflow" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*aspect_ratio_changes*'" \
    "Tests viewport updates during aspect ratio transitions"

run_test "Photo Capture with Metadata" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*photo_capture*'" \
    "Validates complete photo capture workflow with GPS metadata"

run_test "Zoom Functionality Integration" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*zoom_functionality*'" \
    "Tests horizontal zoom slider integration across aspect ratios"

run_test "Viewport Positioning Stress Test" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*stress_test*'" \
    "Rapid aspect ratio changes to test viewport stability"

run_test "Memory Stability During Extended Use" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*memory_stability*'" \
    "Validates memory usage remains stable during continuous operation"

run_test "Error Recovery and Handling" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*error_recovery*'" \
    "Tests system recovery from various error scenarios"

run_test "Performance Responsiveness" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*responsiveness*'" \
    "Measures UI response times for camera operations"

# Run Performance Benchmarks
echo "=========================================="
echo "PHASE 4: PERFORMANCE BENCHMARKS"  
echo "=========================================="

run_test "Viewport Calculation Performance" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraPerformanceBenchmark*viewport_calculation*'" \
    "Benchmarks viewport bounds calculation speed and efficiency"

run_test "Memory Usage Improvements" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraPerformanceBenchmark*memory_usage*'" \
    "Measures memory footprint reduction (target: 15-25MB improvement)"

run_test "Camera Startup Time Improvements" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraPerformanceBenchmark*startup_improvements*'" \
    "Measures initialization speed improvement (target: 20-30% faster)"

run_test "Aspect Ratio Change Responsiveness" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraPerformanceBenchmark*responsiveness*'" \
    "Benchmarks UI responsiveness during aspect ratio transitions"

run_test "Continuous Load Performance" \
    "./gradlew :androidApp:connectedAndroidTest --tests='*CameraPerformanceBenchmark*continuous_load*'" \
    "Stress tests performance under sustained viewport calculations"

# Optional: 30-minute stability test (commented out by default due to duration)
# echo "=========================================="
# echo "PHASE 5: LONG-TERM STABILITY (OPTIONAL)"
# echo "=========================================="
# 
# read -p "Run 30-minute stability test? This will take 30 minutes. (y/N): " -n 1 -r
# echo
# if [[ $REPLY =~ ^[Yy]$ ]]; then
#     run_test "30-Minute Stability Test" \
#         "./gradlew :androidApp:connectedAndroidTest --tests='*CameraIntegrationTest*thirty_minute*'" \
#         "Extended stability test to ensure zero crashes during 30-minute session"
# else
#     echo "Skipping 30-minute stability test"
#     echo ""
# fi

# Generate Test Report
echo "=========================================="
echo "TEST RESULTS SUMMARY"
echo "=========================================="

# Calculate pass rate
if [ $TESTS_TOTAL -gt 0 ]; then
    PASS_RATE=$((TESTS_PASSED * 100 / TESTS_TOTAL))
else
    PASS_RATE=0
fi

echo "Total Tests: $TESTS_TOTAL"
echo -e "Passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Failed: ${RED}$TESTS_FAILED${NC}"
echo "Pass Rate: $PASS_RATE%"
echo ""

# Overall result
if [ $TESTS_FAILED -eq 0 ] && [ $TESTS_PASSED -gt 0 ]; then
    echo -e "${GREEN}üéâ ALL TESTS PASSED! Camera viewport fixes validated successfully.${NC}"
    echo ""
    echo "‚úÖ Viewport positioning consistent across all aspect ratios (1:1, 4:3, 16:9)"
    echo "‚úÖ Horizontal zoom slider responsive and accurate"
    echo "‚úÖ Performance improvements validated"  
    echo "‚úÖ Memory usage optimization confirmed"
    echo "‚úÖ UI responsiveness maintained during aspect ratio changes"
    echo "‚úÖ Safe area compliance for burnin prevention"
    
    OVERALL_STATUS=0
elif [ $TESTS_PASSED -gt 0 ] && [ $PASS_RATE -ge 80 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  MOSTLY SUCCESSFUL ($PASS_RATE% pass rate)${NC}"
    echo -e "${YELLOW}Some tests failed but core functionality is working${NC}"
    
    OVERALL_STATUS=0
else
    echo -e "${RED}‚ùå TESTS FAILED - Camera viewport fixes need attention${NC}"
    echo -e "${RED}$TESTS_FAILED out of $TESTS_TOTAL tests failed${NC}"
    
    OVERALL_STATUS=1
fi

echo ""
echo "Detailed test logs are available in the Gradle test reports."
echo "Check HazardHawk/androidApp/build/reports/tests/ for full results."

# Return to original directory
cd ..

exit $OVERALL_STATUS
